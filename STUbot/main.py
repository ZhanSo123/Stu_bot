import logging
import sqlite3
import datetime
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.i18n import gettext as _
from aiogram import types
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from aiogram import html
from aiogram import BaseMiddleware
from aiogram import flags

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand

import matplotlib.pyplot as plt
from io import BytesIO

TOKEN = "7696336002:AAEYLmJ0DyxPm5HT93CWJWN9xJDJ5Nv-BVI"

# --- DATABASE ---
conn = sqlite3.connect('stubot.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS deadlines (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    subject TEXT,
    task TEXT,
    due_date TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    category TEXT,
    amount REAL,
    date TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    day TEXT,
    time TEXT,
    subject TEXT
)''')

conn.commit()

# --- DISPATCHER ---
router = Router()
dp = Dispatcher(storage=MemoryStorage())
dp.include_router(router)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
    [KeyboardButton(text="/–¥–µ–¥–ª–∞–π–Ω—ã"), KeyboardButton(text="/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
    [KeyboardButton(text="/—Ä–∞—Å—Ö–æ–¥—ã"), KeyboardButton(text="/–¥–æ–±–∞–≤–∏—Ç—å_–¥–µ–¥–ª–∞–π–Ω")],
    [KeyboardButton(text="/–¥–æ–±–∞–≤–∏—Ç—å_–ø–∞—Ä—É"), KeyboardButton(text="/–¥–æ–±–∞–≤–∏—Ç—å_—Ä–∞—Å—Ö–æ–¥")]
])

@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø STUbot ‚Äî —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞. –í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º:", reply_markup=main_kb)

@router.message(F.text == "/–¥–æ–±–∞–≤–∏—Ç—å_–¥–µ–¥–ª–∞–π–Ω")
async def add_deadline(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü—Ä–µ–¥–º–µ—Ç | –ó–∞–¥–∞–Ω–∏–µ | 2025-05-15", parse_mode=ParseMode.MARKDOWN)

@router.message(lambda msg: '|' in msg.text and '-' in msg.text and len(msg.text.split('|')) == 3)
async def save_deadline(message: Message):
    subject, task, due_date = [s.strip() for s in message.text.split('|')]
    cursor.execute("INSERT INTO deadlines (user_id, subject, task, due_date) VALUES (?, ?, ?, ?)",
                   (message.from_user.id, subject, task, due_date))
    conn.commit()
    await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@router.message(F.text == "/–¥–µ–¥–ª–∞–π–Ω—ã")
async def show_deadlines(message: Message):
    cursor.execute("SELECT subject, task, due_date FROM deadlines WHERE user_id=? ORDER BY due_date ASC", (message.from_user.id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ ‚úçÔ∏è")
    else:
        text = "üìå –¢–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
        for subject, task, due_date in rows:
            text += f"{due_date}: {subject} ‚Äî {task}\n"
        await message.answer(text)

@router.message(F.text == "/–¥–æ–±–∞–≤–∏—Ç—å_—Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –°—É–º–º–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–¥–∞ | 1500")

@router.message(lambda msg: '|' in msg.text and len(msg.text.split('|')) == 2)
async def save_expense(message: Message):
    try:
        category, amount = [s.strip() for s in message.text.split('|')]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–º–º–∞ —á–∏—Å–ª–æ–º
        if not amount.replace('.', '', 1).isdigit():
            await message.answer("–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.")
            return

        amount = float(amount)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ —á–∏—Å–ª–æ
        date = datetime.date.today().isoformat()

        cursor.execute("INSERT INTO expenses (user_id, category, amount, date) VALUES (?, ?, ?, ?)",
                       (message.from_user.id, category, amount, date))
        conn.commit()
        await message.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

@router.message(F.text == "/—Ä–∞—Å—Ö–æ–¥—ã")
async def show_expenses(message: Message):
    cursor.execute("SELECT category, amount, date FROM expenses WHERE user_id=? ORDER BY date DESC", (message.from_user.id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ üí∏")
    else:
        text = "üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n\n"
        for category, amount, date in rows[:10]:
            text += f"{date}: {category} ‚Äî {amount} ‚Ç∏\n"
        await message.answer(text)

@router.message(F.text == "/–¥–æ–±–∞–≤–∏—Ç—å_–ø–∞—Ä—É")
async def add_class(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–µ–Ω—å | –í—Ä–µ–º—è | –ü—Ä–µ–¥–º–µ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ | 10:00 | –ò—Å—Ç–æ—Ä–∏—è")

@router.message(lambda msg: '|' in msg.text and len(msg.text.split('|')) == 3)
async def save_class(message: Message):
    day, time, subject = [s.strip() for s in message.text.split('|')]
    cursor.execute("INSERT INTO schedule (user_id, day, time, subject) VALUES (?, ?, ?, ?)",
                   (message.from_user.id, day.capitalize(), time, subject))
    conn.commit()
    await message.answer("‚úÖ –ü–∞—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")

@router.message(F.text == "/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def show_schedule(message: Message):
    weekday = datetime.datetime.today().strftime('%A')
    cursor.execute("SELECT time, subject FROM schedule WHERE user_id=? AND day=? ORDER BY time",
                   (message.from_user.id, weekday.capitalize()))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üéâ")
    else:
        text = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({weekday}):\n\n"
        for time, subject in rows:
            text += f"{time} ‚Äî {subject}\n"
        await message.answer(text)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_deadline_reminders():
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)

    cursor.execute("SELECT subject, task, due_date FROM deadlines")
    rows = cursor.fetchall()

    for subject, task, due_date in rows:
        try:
            deadline_date = datetime.strptime(due_date, "%Y-%m-%d").date()
            if deadline_date == tomorrow:
                await bot.send_message(
                    7334707979,  # üîÅ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—é–¥–∞ —Å–≤–æ–π ID (–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–º user_id –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ start)
                    f"üìå –ó–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ: <b>{subject}</b> ‚Äî {task}",
                    parse_mode="HTML"
                )
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", e)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def start_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_deadline_reminders, trigger="cron", hour=8)  # ‚è∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
    scheduler.start()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    start_scheduler()  # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

@router.message(F.text == "/–≥—Ä–∞—Ñ–∏–∫_—Ä–∞—Å—Ö–æ–¥–æ–≤")
async def send_expenses_chart(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT category, SUM(amount) FROM expenses WHERE user_id=? GROUP BY category", (message.from_user.id,))
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ üí∏")
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    categories = [row[0] for row in rows]
    amounts = [row[1] for row in rows]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    fig, ax = plt.subplots()
    ax.pie(amounts, labels=categories, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')  # –°–¥–µ–ª–∞—Ç—å –∫—Ä—É–≥

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
    buf = BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("üìä –í–æ—Ç —Ç–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:", file=buf)
    buf.close()

@router.message(F.text.startswith("/–ø–æ–∏—Å–∫_–¥–µ–¥–ª–∞–π–Ω–∞"))
async def search_deadline(message: Message):
    subject = message.text[len("/–ø–æ–∏—Å–∫_–¥–µ–¥–ª–∞–π–Ω–∞ "):].strip()
    cursor.execute("SELECT subject, task, due_date FROM deadlines WHERE user_id=? AND subject LIKE ? ORDER BY due_date ASC", 
                   (message.from_user.id, f"%{subject}%"))
    rows = cursor.fetchall()

    if not rows:
        await message.answer(f"–ù–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject}")
    else:
        text = f"üìå –î–µ–¥–ª–∞–π–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}:\n\n"
        for subject, task, due_date in rows:
            text += f"{due_date}: {subject} ‚Äî {task}\n"
        await message.answer(text)

@router.message(F.text == "/–ø–∞—Ä—ã –∑–∞–≤—Ç—Ä–∞")
async def show_classes_tomorrow(message: Message):
    tomorrow = (datetime.datetime.today() + timedelta(days=1)).strftime('%A')
    cursor.execute("SELECT time, subject FROM schedule WHERE user_id=? AND day=? ORDER BY time", 
                   (message.from_user.id, tomorrow.capitalize()))
    rows = cursor.fetchall()

    if not rows:
        await message.answer(f"–ù–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}) –Ω–µ—Ç –ø–∞—Ä üéâ")
    else:
        text = f"üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({tomorrow}):\n\n"
        for time, subject in rows:
            text += f"{time} ‚Äî {subject}\n"
        await message.answer(text)

@router.message(F.text == "/—Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –∞–ø—Ä–µ–ª—å")
async def show_expenses_for_month(message: Message):
    cursor.execute("SELECT category, SUM(amount), strftime('%m', date) FROM expenses WHERE user_id=? AND strftime('%m', date)='04' GROUP BY category", 
                   (message.from_user.id,))
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –∞–ø—Ä–µ–ª—å üí∏")
    else:
        text = "üí∞ –†–∞—Å—Ö–æ–¥—ã –∑–∞ –∞–ø—Ä–µ–ª—å:\n\n"
        for category, amount, _ in rows:
            text += f"{category}: {amount} ‚Ç∏\n"
        await message.answer(text)

@router.message(F.text == "/–¥–æ–±–∞–≤–∏—Ç—å_–¥–µ–¥–ª–∞–π–Ω")
async def add_deadline(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ü—Ä–µ–¥–º–µ—Ç | –ó–∞–¥–∞–Ω–∏–µ | 2025-05-15. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, PDF –∏–ª–∏ —Ñ–æ—Ç–æ).")

@router.message(lambda msg: '|' in msg.text and '-' in msg.text and len(msg.text.split('|')) == 3)
async def save_deadline(message: Message):
    subject, task, due_date = [s.strip() for s in message.text.split('|')]
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª
    if message.document:
        file_id = message.document.file_id

    cursor.execute("INSERT INTO deadlines (user_id, subject, task, due_date, file_id) VALUES (?, ?, ?, ?, ?)",
                   (message.from_user.id, subject, task, due_date, file_id))
    conn.commit()
    await message.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

@router.message(F.text == "/–¥–µ–¥–ª–∞–π–Ω—ã")
async def show_deadlines(message: Message):
    cursor.execute("SELECT subject, task, due_date, file_id FROM deadlines WHERE user_id=? ORDER BY due_date ASC", (message.from_user.id,))
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ ‚úçÔ∏è")
    else:
        text = "üìå –¢–≤–æ–∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n\n"
        for subject, task, due_date, file_id in rows:
            text += f"{due_date}: {subject} ‚Äî {task}\n"
            if file_id:
                await message.answer_document(file_id)
        await message.answer(text)

@router.message(F.text == "/—É–¥–∞–ª–∏—Ç—å_–¥–µ–¥–ª–∞–π–Ω")
async def delete_deadline(message: Message):
    cursor.execute("SELECT id, subject, task, due_date FROM deadlines WHERE user_id=?", (message.from_user.id,))
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–æ–≤
    keyboard = InlineKeyboardMarkup(row_width=1)
    for row in rows:
        deadline_id, subject, task, due_date = row
        button_text = f"{subject} ‚Äî {task} ({due_date})"
        button = InlineKeyboardButton(text=button_text, callback_data=f"delete_deadline_{deadline_id}")
        keyboard.add(button)

    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–¥–ª–∞–π–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–µ–¥–ª–∞–π–Ω–∞
@router.callback_query(lambda c: c.data.startswith('delete_deadline_'))
async def handle_deadline_deletion(callback_query: types.CallbackQuery):
    deadline_id = int(callback_query.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ callback_data
    cursor.execute("DELETE FROM deadlines WHERE id=? AND user_id=?", (deadline_id, callback_query.from_user.id))
    conn.commit()
    await callback_query.answer("‚úÖ –î–µ–¥–ª–∞–π–Ω —É–¥–∞–ª—ë–Ω!")
    await callback_query.message.edit_text("–î–µ–¥–ª–∞–π–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=None)

@router.message(F.text == "/—É–¥–∞–ª–∏—Ç—å_—Ä–∞—Å—Ö–æ–¥")
async def delete_expense(message: Message):
    cursor.execute("SELECT id, category, amount, date FROM expenses WHERE user_id=?", (message.from_user.id,))
    rows = cursor.fetchall()

    if not rows:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    keyboard = InlineKeyboardMarkup(row_width=1)
    for row in rows:
        expense_id, category, amount, date = row
        button_text = f"{category} ‚Äî {amount} ‚Ç∏ ({date})"
        button = InlineKeyboardButton(text=button_text, callback_data=f"delete_expense_{expense_id}")
        keyboard.add(button)

    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞—Å—Ö–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith('delete_expense_'))
async def handle_expense_deletion(callback_query: types.CallbackQuery):
    expense_id = int(callback_query.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ callback_data
    cursor.execute("DELETE FROM expenses WHERE id=? AND user_id=?", (expense_id, callback_query.from_user.id))
    conn.commit()
    await callback_query.answer("‚úÖ –†–∞—Å—Ö–æ–¥ —É–¥–∞–ª—ë–Ω!")
    await callback_query.message.edit_text("–†–∞—Å—Ö–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=None)